initialize() {
 
    // Ecology and drop parameters:
    defineConstant("CAPACITY", 100000);
    defineConstant("DROP_SIZE", 10000);
   
 	 //Below are dimensioal sets.
 	 defineConstant("ONE_DIMENSIONAL", T);
	 defineConstant("REPRISING_BOUNDARIES", T);
	 defineConstant("DENSITY_INTERACTION_DISTANCE", 0.01);
	 defineConstant("DROP_RADIUS", 0.1);
	 defineConstant("SPEED", 0.04);
	 defineConstant("FEMALE_SPEED", SPEED);
	 defineConstant("MATING_DISTANCE", SPEED);
	 defineConstant("BAR",0.5);
	 defineConstant("EXPECTED_ADULT_COMPETITION", CAPACITY *DENSITY_INTERACTION_DISTANCE);
	 defineCfgParam("GROWTH_AT_ZERO_DENSITY", 6.0);

    // Fitness parameters:
    defineCfgParam("DD_FITNESS_VALUE", 1.0);
	
	//Special parameters for this gene drive:
	 defineCfgParam("Control_X",1.0);
	 defineCfgParam("Control_Y",0.0);

    // For mortality rate as a function of age:
    // Model can be set to allow females to overlap generations.
    defineConstant("RATE_FEMALES_SURVIVE", 0.0);

    // This simulation will use a non-Wright-Fisher model.
    initializeSLiMModelType("nonWF");

 	 // This simulation will take place across continuous space.
	 if (ONE_DIMENSIONAL) {
		 if (REPRISING_BOUNDARIES)
			 initializeSLiMOptions(keepPedigrees = T, dimensionality = "x"); //for 1-D
		 else
			 initializeSLiMOptions(keepPedigrees=T, dimensionality="x", periodicity="x");
		
		 initializeInteractionType(1, "x", reciprocal=T, maxDistance=MATING_DISTANCE);
		 initializeInteractionType(2, "x", reciprocal=T,   maxDistance=DENSITY_INTERACTION_DISTANCE);
    	 i2.setInteractionFunction("l", 1.0);  // "l" is for a linear function; 1.0 is the maximum value of the interaction (at distance = 0)

	 }
	

    // Four variations: Wild type, drive, r1 resistance, r2 resistance.
    wt = initializeMutationType("m1", 0.5, "f", 0.0);
    dr = initializeMutationType("m2", 0.5, "f", 0.0);
    r1 = initializeMutationType("m3", 0.5, "f", 0.0);
    r2 = initializeMutationType("m4", 0.5, "f", 0.0);

    variations = c(wt, dr, r1, r2);

    // Variations are all part of g1 genome element.
    initializeGenomicElementType("g1", variations, c(1, 1, 1, 1));

    // Element is NUM_GRNAS long, each spot on the element representing a GRNA target location.
    initializeGenomicElement(g1, 0,0);

    // These variations overwrite one another.
    variations.mutationStackPolicy = "l";
    variations.mutationStackGroup = 1;

    // No mutation in this model.
    initializeMutationRate(0.0);
    initializeRecombinationRate(0.0);

    // Simulate sexual reproduction: A for autosome.
    initializeSex("A");
}

function (void) defineCfgParam(string$ name, lifs value) {
    if (!exists(name))
        defineConstant(name, value);
}

//// SURVIVAL RULES FOR THE SIMULATION BASED ON AGE
late() {
	all = sim.subpopulations.individuals;
	
	//Males don't live past one generation
	all[all.sex=="M"].fitnessScaling = 0.0;
	
	//Females may survive to the next generation at the specified rate
	females = all[all.sex=="F"];
	females[females.age > 0].fitnessScaling = 0.0;
	females[females.age==0].fitnessScaling = RATE_FEMALES_SURVIVE;
	surviving_inds = all[all.fitnessScaling > 0.0];
	
	// Surviving individuals move
	for (ind in surviving_inds) {
		if (REPRISING_BOUNDARIES) {
				do position = ind.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
				while (!ind.subpopulation.pointInBounds(position));
				ind.setSpatialPosition(position);
		} else {
			// Toroidal world movement.
				ind.x = ind.x + rnorm(1, 0, FEMALE_SPEED);
				ind.setSpatialPosition(p1.pointPeriodic(ind.spatialPosition));
		}
	}	
}

//// RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {
    // Representation of the value of the two chromosomes.
    fitness_value = 1.0;
	 if (ind.tagF == 1.0)
	 	fitness_value = DD_FITNESS_VALUE;
    return fitness_value;
}


//// REPRODUCTION RULES FOR EACH FEMALE.
reproduction(NULL, "F") {
    // First, evaluate whether reproduction is suppressed by a population suppression drive,
    // Then, select a mate based on fitness, then generate offspring.
    // Suppression drives:

    // Females choose a provisional mate, but make a final mating decision based on the
    // attractiveness of that mate, as determined by the fitness of the mate. If a mate is
    // rejected, the female tries again, up to a maximum of ten tries, after which she gives up.
	all_neighbors = i1.nearestNeighbors(individual, subpop.individualCount);
	neighbors = all_neighbors[all_neighbors.sex == "M"];
	if (size(neighbors) == 0) // If no mates are in mate detection range, the female won't mate.    
    return;
    
    attempt_no = 0;
    while (1) {
        // First, select a random potential mate.
		mate_no = 0;
		if (size(neighbors) > 1)
			mate_no = rdunif(1, max=size(neighbors) - 1);
		selected_mate = neighbors[mate_no];
      // Determine attractiveness of potential mate.
      mate_attractiveness = genotypeFitness(selected_mate);
      // Determine if this mate is chosen, based on attractiveness.
      if (runif(1) < mate_attractiveness)
      	break;  // Select this mate.
      // After ten candidates fail, female gives up.
      attempt_no = attempt_no + 1;
      if (attempt_no == 9)
      	return;
    }
    // Mate has now been selected.
    // Fecundity is based on both the crowding/competition in the system, as well as female fitness.
    // Number of offspring number based on binomial distrobution. 
	 n_1 = all_neighbors[abs(all_neighbors.x - individual.x) <= DENSITY_INTERACTION_DISTANCE];
	 adult_density_force = i2.totalOfNeighborStrengths(individual);
	 competition_ratio = adult_density_force / EXPECTED_ADULT_COMPETITION;
	 actual_competition_factor = GROWTH_AT_ZERO_DENSITY/ ((GROWTH_AT_ZERO_DENSITY-1) * competition_ratio + 1);
	 p = genotypeFitness(individual) * actual_competition_factor * 0.04 / (1 + RATE_FEMALES_SURVIVE);
    num_offspring = rbinom(1, 50, p); 
   
   if(selected_mate.tagF == 1.0 & individual.tagF == 1.0){
	   carrier_offspring = asInteger(Control_X*num_offspring);
	   wt_offspring = num_offspring - carrier_offspring;
   }
   if(selected_mate.tagF == 0.0 & individual.tagF == 1.0){
	   carrier_offspring = asInteger(Control_X*num_offspring);
	   wt_offspring = num_offspring - carrier_offspring;
   }
   if(selected_mate.tagF == 1.0 & individual.tagF == 0.0){
	   carrier_offspring = 0;
	   wt_offspring = asInteger(Control_Y*num_offspring);
   }
   if(selected_mate.tagF == 0.0 & individual.tagF == 0.0){
	   carrier_offspring = 0;
	   wt_offspring = num_offspring;
   }
	   
	   
   if(num_offspring == 0)
	 	return;
	if(carrier_offspring!=0){
    for (i in seqLen(carrier_offspring)) {
        // Add offspring to the subpopulation.
      offspring = subpop.addCrossed(individual, selected_mate);
	  offspring.tagF = 1.0;
      if (!isNULL(offspring))
		{
			if (REPRISING_BOUNDARIES)
			{
				// Offspring placement within reprising boundaries.
				if (!ONE_DIMENSIONAL)
				{
					do position = individual.spatialPosition + rnorm(2, 0, FEMALE_SPEED);
					while (!individual.subpopulation.pointInBounds(position));
					offspring.setSpatialPosition(position);
				} else
				{
					// Toroidal world offspring placement.
					do position = individual.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
					while (!individual.subpopulation.pointInBounds(position));
					offspring.setSpatialPosition(position);
				}
			}
			else {
				if (!ONE_DIMENSIONAL) {
					position = individual.spatialPosition + rnorm(2, 0, FEMALE_SPEED);
					offspring.setSpatialPosition(p1.pointPeriodic(position));
				} else {
					position = individual.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
					offspring.setSpatialPosition(p1.pointPeriodic(position));
				}
			}
		}
    }
    }
    if(wt_offspring!=0){
	    for (i in seqLen(wt_offspring)) {
        // Add offspring to the subpopulation.
      offspring = subpop.addCrossed(individual, selected_mate);
	  offspring.tagF = 0.0;
      if (!isNULL(offspring))
		{
			if (REPRISING_BOUNDARIES)
			{
				// Offspring placement within reprising boundaries.
				if (!ONE_DIMENSIONAL)
				{
					do position = individual.spatialPosition + rnorm(2, 0, FEMALE_SPEED);
					while (!individual.subpopulation.pointInBounds(position));
					offspring.setSpatialPosition(position);
				} else
				{
					// Toroidal world offspring placement.
					do position = individual.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
					while (!individual.subpopulation.pointInBounds(position));
					offspring.setSpatialPosition(position);
				}
			}
			else {
				if (!ONE_DIMENSIONAL) {
					position = individual.spatialPosition + rnorm(2, 0, FEMALE_SPEED);
					offspring.setSpatialPosition(p1.pointPeriodic(position));
				} else {
					position = individual.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
					offspring.setSpatialPosition(p1.pointPeriodic(position));
				}
			}
		}
    }
    }
}

//// COLOR RULES FOR SLIM GUI DISPLAY.
early() {
	all = sim.subpopulations.individuals;
	all.color = "blue"; // wt individuals are blue
	all[all.tagF == 1.0].color = "red"; // Drive-carrying individuals are red
	
}


//// EVALUATE SPATIAL INTERACTIONS BETWEEN INDIVIDUALS FOR OTHER FUNCTIONS.
late() {
	i1.evaluate();
	i2.evaluate();
}

//// START THE SIMULATION BY ADDING AN INITIAL WILD POPULATION.
1 {
	// Start with a population of wild type flies.
	sim.addSubpop("p1", CAPACITY);
	all= p1.individuals;
	all.genomes.addNewDrawnMutation(m1,0);
	all.x=p1.pointUniform(CAPACITY);
	all.tagF = 0.0;
}

//// DROP A GROUP OF MODIFIED INDIVIDUALS INTO THE POPULATION.
10 {
    // Add a drop of modified individuals to p1.
    sim.addSubpop("p2", DROP_SIZE,0.0);
    drop = p2.individuals;
    // Now that genes have been set, move all the individuals from the drop into p1:
    drop.x = runif(DROP_SIZE, 0, DROP_RADIUS);
	 drop.tagF = 1.0;
    p1.takeMigrants(drop);
    p2.removeSubpopulation();
}

//// PROGRAM OUTPUT.
10:late() {
		this_gen = sim.generation-10;
		n=0;
		all = sim.subpopulations.individuals;
		if(this_gen == 22){
			catn("generation:"+this_gen);
			do{
				if(any((all.x > (n/50)) & (all.x <= ((n+1)/50))))
					{
						all_slice_helper =(all.x > (n/50)) & (all.x < ((n+1)/50));
						all_slice = all[all_slice_helper];
						Drive_Heterozygotes = all_slice[all_slice.tagF == 1.0];
						Wild_Homozygotes = all_slice[all_slice.tagF == 0.0];
						test = length(all_slice) - length(Drive_Heterozygotes) - length(Wild_Homozygotes);
						LEFT=n/50;
						RIGHT=(n+1)/50;
						CORE = (LEFT + RIGHT)/2;
						catn("CORE:"+CORE);
						catn("Drive_Heterozygotes:"+length(Drive_Heterozygotes));
						catn("Wild_Homozygotes:"+length(Wild_Homozygotes));
						catn("Pop_size:"+length(all_slice));
						n=n+1;
					}
					else{
						LEFT=n/50;
						RIGHT=(n+1)/50;
						CORE = (LEFT + RIGHT)/2;
						catn("CORE:"+CORE);
						catn("Drive_Heterozygotes:0");
						catn("Wild_Homozygotes:0");
						catn("Pop_size:0");
						n=n+1;
					}
      		}while(n<50);

		}
		if(n == 50)
			sim.simulationFinished();	
}

//// PROGRAM END CONDITION.
510 late() {
    	sim.simulationFinished();
}
