initialize() {
	defineCfgParam("DRIVE_EFFICIENCY",1.00);
	// Drive type:
	defineConstant("NO_NAME",T);
	
	// Ecology and drop parameters:
	defineConstant("CAPACITY", 100000);
	defineConstant("DROP_SIZE", 20000);
	
	//Below are dimensioal sets.
	defineConstant("ONE_DIMENSIONAL", T);
	defineConstant("REPRISING_BOUNDARIES", T);
	defineConstant("DENSITY_INTERACTION_DISTANCE", 0.01);
	defineConstant("DROP_RADIUS", 0.2);
	defineConstant("SPEED", 0.04);
	defineConstant("FEMALE_SPEED", SPEED);
	defineConstant("MATING_DISTANCE", SPEED);
	defineConstant("BAR",0.5);
	defineConstant("EXPECTED_ADULT_COMPETITION", CAPACITY *DENSITY_INTERACTION_DISTANCE);
	defineCfgParam("GROWTH_AT_ZERO_DENSITY", 6.0);
	defineConstant("HETEROZYGOUS_DROP",F);
	
	// Fitness parameters:
	defineCfgParam("DD_FITNESS_VALUE", 1.00);
	defineCfgParam("DX_FITNESS_VALUE", sqrt(DD_FITNESS_VALUE));
	defineCfgParam("SOMATIC_FITNESS_MUTLIPLIER_F", 1.0);
	defineCfgParam("SOMATIC_FITNESS_MUTLIPLIER_M", 1.0);
	
	// For mortality rate as a function of age:
	// Model can be set to allow females to overlap generations.
	defineConstant("RATE_FEMALES_SURVIVE", 0.0);
	
	// This simulation will use a non-Wright-Fisher model.
	initializeSLiMModelType("nonWF");
	
	// This simulation will take place across continuous space.
	if (ONE_DIMENSIONAL) {
		if (REPRISING_BOUNDARIES)
			initializeSLiMOptions(keepPedigrees = T, dimensionality = "x"); //for 1-D
		else
			initializeSLiMOptions(keepPedigrees=T, dimensionality="x", periodicity="x");
		
		initializeInteractionType(1, "x", reciprocal=T, maxDistance=MATING_DISTANCE);
		initializeInteractionType(2, "x", reciprocal=T,   maxDistance=DENSITY_INTERACTION_DISTANCE);
	}
	
	
	// Four variations: Wild type, drive, r1 resistance, r2 resistance.
	wt = initializeMutationType("m1", 0.5, "f", 0.0);
	dr = initializeMutationType("m2", 0.5, "f", 0.0);
	r1 = initializeMutationType("m3", 0.5, "f", 0.0);
	r2 = initializeMutationType("m4", 0.5, "f", 0.0);
	
	variations = c(wt, dr, r1, r2);
	
	// Variations are all part of g1 genome element.
	initializeGenomicElementType("g1", variations, c(1, 1, 1, 1));
	
	// Element is NUM_GRNAS long, each spot on the element representing a GRNA target location.
	initializeGenomicElement(g1, 0,0);
	
	// These variations overwrite one another.
	variations.mutationStackPolicy = "l";
	variations.mutationStackGroup = 1;
	
	// No mutation in this model.
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.0);
	
	// Simulate sexual reproduction: A for autosome.
	initializeSex("A");
}

function (void) defineCfgParam(string$ name, lifs value) {
	if (!exists(name))
		defineConstant(name, value);
}

//// SURVIVAL RULES FOR THE SIMULATION BASED ON AGE
late() {
	all = sim.subpopulations.individuals;
	
	//Males don't live past one generation
	all[all.sex=="M"].fitnessScaling = 0.0;
	
	//Females may survive to the next generation at the specified rate
	females = all[all.sex=="F"];
	females[females.age > 0].fitnessScaling = 0.0;
	females[females.age==0].fitnessScaling = RATE_FEMALES_SURVIVE;
	surviving_inds = all[all.fitnessScaling > 0.0];
	
	// Surviving individuals move
	for (ind in surviving_inds) {
		if (REPRISING_BOUNDARIES) {
			do position = ind.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
			while (!ind.subpopulation.pointInBounds(position));
			ind.setSpatialPosition(position);
		} else {
			// Toroidal world movement.
			ind.x = ind.x + rnorm(1, 0, FEMALE_SPEED);
			ind.setSpatialPosition(p1.pointPeriodic(ind.spatialPosition));
		}
	}
}

//// RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {
	// Representation of the value of the two chromosomes.
	fitness_value = 1.0;
	
	// Check both chromosomes for drive and type 2 resistance allele.
	// These are the only variants that affect fitness.
	drive_on_1 = ind.genome1.countOfMutationsOfType(m2)> 0;
	drive_on_2 = ind.genome2.countOfMutationsOfType(m2)> 0;
	res2_on_1 = ind.genome1.countOfMutationsOfType(m4) > 0;
	res2_on_2 = ind.genome2.countOfMutationsOfType(m4) > 0;
	wt_1 = ind.genome1.countOfMutationsOfType(m1) > 0;
	wt_2 = ind.genome2.countOfMutationsOfType(m1) > 0;
	
	somatic_fitness_mult = 1;
	if (ind.sex == "F")
		somatic_fitness_mult = SOMATIC_FITNESS_MUTLIPLIER_F;
	somatic_fitness_mult = 1;
	if (ind.sex == "M")
		somatic_fitness_mult = SOMATIC_FITNESS_MUTLIPLIER_M;
	// Check both chromosomes for the drive.
	if (drive_on_1) {
		fitness_value = DX_FITNESS_VALUE;
		if (wt_1 | wt_2)
			fitness_value = fitness_value * somatic_fitness_mult;
	}
	if (drive_on_2) {
		fitness_value = DX_FITNESS_VALUE;
		if (wt_1 | wt_2)
			fitness_value = fitness_value * somatic_fitness_mult;
	}
	if (drive_on_1 & drive_on_2)
		fitness_value = DD_FITNESS_VALUE;
	// Return fitness for individual with this genotype.
	return fitness_value;
}


//// REPRODUCTION RULES FOR EACH FEMALE.
reproduction(NULL, "F") {
	// First, evaluate whether reproduction is suppressed by a population suppression drive,
	// Then, select a mate based on fitness, then generate offspring.
	// Suppression drives:
	
	// Females choose a provisional mate, but make a final mating decision based on the
	// attractiveness of that mate, as determined by the fitness of the mate. If a mate is
	// rejected, the female tries again, up to a maximum of ten tries, after which she gives up.
	all_neighbors = i1.nearestNeighbors(individual, subpop.individualCount);
	neighbors = all_neighbors[all_neighbors.sex == "M"];
	if (size(neighbors) == 0) // If no mates are in mate detection range, the female won't mate.    
		return;
	
	attempt_no = 0;
	while (1) {
		// First, select a random potential mate.
		mate_no = 0;
		if (size(neighbors) > 1)
			mate_no = rdunif(1, max=size(neighbors) - 1);
		selected_mate = neighbors[mate_no];
		// Determine attractiveness of potential mate.
		mate_attractiveness = genotypeFitness(selected_mate);
		// Determine if this mate is chosen, based on attractiveness.
		if (runif(1) < mate_attractiveness)
			break;  // Select this mate.
		// After ten candidates fail, female gives up.
		attempt_no = attempt_no + 1;
		if (attempt_no == 9)
			return;
	}
	// Mate has now been selected.
	// Fecundity is based on both the crowding/competition in the system, as well as female fitness.
	// Number of offspring number based on binomial distrobution. 
	n_1 = all_neighbors[abs(all_neighbors.x - individual.x) <= DENSITY_INTERACTION_DISTANCE];
	adult_density_force = length(n_1) - sum(i1.interactionDistance(individual,n_1))*(1/DENSITY_INTERACTION_DISTANCE);
	competition_ratio = adult_density_force / EXPECTED_ADULT_COMPETITION;
	actual_competition_factor = GROWTH_AT_ZERO_DENSITY/ ((GROWTH_AT_ZERO_DENSITY-1) * competition_ratio + 1);
	p = genotypeFitness(individual) * actual_competition_factor * 0.04 / (1 + RATE_FEMALES_SURVIVE);
	num_offspring = rbinom(1, 50, p);
	sum_ind = sum(individual.countOfMutationsOfType(m2));
	sum_mate = sum(selected_mate.countOfMutationsOfType(m2));
	if((sum_ind==0) & (sum_mate != 0)){
		//successRate=1-(1-DRIVE_EFFICIENCY)^sum_mate;
		successRate = DRIVE_EFFICIENCY;
		if(runif(1)<= successRate)
			num_offspring = 0;
	}
	if(num_offspring == 0)
		return;
	for (i in seqLen(num_offspring)) {
		// Add offspring to the subpopulation.
		offspring = subpop.addCrossed(individual, selected_mate);
		if (!isNULL(offspring))
		{
			if (REPRISING_BOUNDARIES)
			{
				// Offspring placement within reprising boundaries.
				if (!ONE_DIMENSIONAL)
				{
					do position = individual.spatialPosition + rnorm(2, 0, FEMALE_SPEED);
					while (!individual.subpopulation.pointInBounds(position));
					offspring.setSpatialPosition(position);
				} else
				{
					// Toroidal world offspring placement.
					do position = individual.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
					while (!individual.subpopulation.pointInBounds(position));
					offspring.setSpatialPosition(position);
				}
			}
			else {
				if (!ONE_DIMENSIONAL) {
					position = individual.spatialPosition + rnorm(2, 0, FEMALE_SPEED);
					offspring.setSpatialPosition(p1.pointPeriodic(position));
				} else {
					position = individual.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
					offspring.setSpatialPosition(p1.pointPeriodic(position));
				}
			}
		}
	}
}


//// COLOR RULES FOR SLIM GUI DISPLAY.
early() {
	all = sim.subpopulations.individuals;
	all.color = "blue"; // wt individuals are blue
	two_res = (all.genome1.countOfMutationsOfType(m4) | all.genome1.countOfMutationsOfType(m3) ) & (all.genome2.countOfMutationsOfType(m4) | all.genome2.countOfMutationsOfType(m3));
	all[two_res].color = "yellow"; // Resistance homozygotes are yellow
	all[all.countOfMutationsOfType(m2) >= 1].color = "red"; // Drive-carrying individuals are red

}


//// EVALUATE SPATIAL INTERACTIONS BETWEEN INDIVIDUALS FOR OTHER FUNCTIONS.
late() {
	i1.evaluate(sim.subpopulations);
	i2.evaluate(sim.subpopulations);
}

//// START THE SIMULATION BY ADDING AN INITIAL WILD POPULATION.
1 early() {
	// Start with a population of wild type flies.
	sim.addSubpop("p1", CAPACITY);
	all= p1.individuals;
	all.genomes.addNewDrawnMutation(m1,0);
	all.x=p1.pointUniform(CAPACITY);
	sim.setValue("timer", "start");
}

//// DROP A GROUP OF MODIFIED INDIVIDUALS INTO THE POPULATION.
10 early() {
	// Add a drop of modified individuals to p1.
	sim.addSubpop("p2", DROP_SIZE);
	drop = p2.individuals;
	drop.genomes.addNewDrawnMutation(m2, 0);
	if (HETEROZYGOUS_DROP)
		drop.genome2.addNewDrawnMutation(m1,0);
	// Now that genes have been set, move all the individuals from the drop into p1:
	drop.x = runif(DROP_SIZE, 0, DROP_RADIUS);
	p1.takeMigrants(drop);
	p2.removeSubpopulation();
}

//// PROGRAM OUTPUT.
late() {
	// Calculate rates that we are intersted in:
	all = sim.subpopulations.individuals;
	this_gen = sim.cycle-10;
	target=all[all.countOfMutationsOfType(m2)!=0];
	tx=target.x;	
	slice_x3= (tx >0.2) & (tx <= 0.3);
	slice3=target[slice_x3];
	num_x3=(all.x > 0.2) & (all.x < 0.3);
	num_x3_1 = all[num_x3];
	num_x_3 = length(num_x3_1);
	num_dr_3 = sum(slice3.genomes.countOfMutationsOfType(m2));
	rate_dr_3 = num_dr_3/(2*num_x_3);
	timer = sim.getValue("timer");
	catn("MARKER");
	//only start timer once
	if (rate_dr_3 >= BAR) {
		if (timer == "start") {
			thisgen=sim.cycle-10;
			catn("STARTING_TIMER_AT:" + thisgen);
			catn("STARTING_FREQUENCY:"+rate_dr_3);
			sim.setValue("timer", thisgen);
		}
	}
	slice_x8= (tx >0.7) & (tx <= 0.8);
	slice8=target[slice_x8];
	num_x8=(all.x > 0.7) & (all.x < 0.8);
	num_x8_1 = all[num_x8];
	num_x_8 = length(num_x8_1);
	num_dr_8 = sum(slice8.genomes.countOfMutationsOfType(m2));
	rate_dr_8 = num_dr_8/(2*num_x_8);
	
	if (rate_dr_8 >= BAR) {
		start_gen = sim.getValue("timer");
		this_gen = sim.cycle-10;
		gens_elapsed = this_gen - start_gen;
		catn("STOPPING_TIMER_AT:" + this_gen);
		catn("STOPPING_FREQUENCY:"+rate_dr_8);
	}
	n=0;
	if(rate_dr_3 >= 0.5 & rate_dr_8 <= 0.5){
		catn("generation:"+this_gen);
		do{
			if(any((all.x > (n/50)) & (all.x <= ((n+1)/50))))
			{
				all_slice_helper =(all.x > (n/50)) & (all.x < ((n+1)/50));
				all_slice = all[all_slice_helper];
				Drive_Heterozygotes = all_slice[all_slice.countOfMutationsOfType(m1)
					== 1 & all_slice.countOfMutationsOfType(m2) == 1];
				Wild_Homozygotes = all_slice[all_slice.countOfMutationsOfType(m1) == 2];
				Drive_Homozygotes = all_slice[all_slice.countOfMutationsOfType(m2)
					== 2];
				dr_dr = sum(Drive_Heterozygotes.genomes.countOfMutationsOfType(m2)==1);
				dr_wt = sum(Drive_Heterozygotes.genomes.countOfMutationsOfType(m1)==1);
				wt_wt = sum(Wild_Homozygotes.genomes.countOfMutationsOfType(m1)==1);
				dr_dr_1 = sum(Drive_Homozygotes.genomes.countOfMutationsOfType(m2)==1);
				
				drive_carrier_freq = (length(Drive_Heterozygotes)+length(Drive_Homozygotes))/length(all_slice);
				LEFT=n/50;
				RIGHT=(n+1)/50;
				CORE = (LEFT + RIGHT)/2;
				catn("POSITION:"+CORE+":DRIVE_CARRIER_FREQUENCY:"+drive_carrier_freq);
				n=n+1;
				if(n==50)
					catn("#######");
			
			}
			else{
				LEFT=n/50;
				RIGHT=(n+1)/50;
				CORE = (LEFT + RIGHT)/2;
				catn("POSITION:"+CORE+":DRIVE_CARRIER_FREQUENCY:NULL");
				n=n+1;
				if(n==50)
					catn("#######");
			}
		}while(n<50);
	
	}
	if(rate_dr_8 > 0.5)
		sim.simulationFinished();
}

//// PROGRAM END CONDITION.
510 late() {
	sim.simulationFinished();
}
