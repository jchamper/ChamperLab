// Author: Sam Champer and Isabel Kim.
// Created in association with Jackson Champer and the Messer lab.

// A framework for simulating many different gene drives
// with varying parameters, intended to be configured by
// altering the heading below, or by dynamically varying
// values in the header using an associated Python file.

// These gene drives are located on the same chromosome as their target sites.
// This file may be used to run the female fertility homing drive, both-sex fertility
// homing drive, or both-sex lethal homing drive.

// The following header to be replaced via python,
// such that these values can be varied across multiple runs of slim.

initialize() {
	
	// Drive parameters:
	defineConstant("HOMING_DRIVE", T); // Set T for female fertile and both-sex fertile or lethal homing drive
	defineConstant("RECESSIVE_FEMALE_STERILE_SUPPRESSION_DRIVE", F); // For both-sex fertile drive, set this and the one below to T
	defineConstant("RECESSIVE_MALE_STERILE_SUPPRESSION_DRIVE", F);
	defineConstant("RECESSIVE_BOTH_SEX_LETHAL_SUPPRESSION_DRIVE", F);
	defineCfgParam("GERMLINE_EFFICIENCY", 1.00);
	defineCfgParam("EMBRYO_RESISTANCE_CUT_RATE", 0.0);
	defineCfgParam("HOMING_PHASE_CUT_RATE",  GERMLINE_EFFICIENCY/(1-(1-GERMLINE_EFFICIENCY)/2));
	defineCfgParam("GERMLINE_RESISTANCE_RATE",  (1-GERMLINE_EFFICIENCY)/2);
	defineConstant("NUM_GRNAS", 1);
	defineConstant("R1_OCCURRENCE_RATE", 0.0);

	
	// Ecology parameters:
	defineCfgParam("LOW_DENSITY_GROWTH_RATE", 6.0);
	defineConstant("INBREEDING_AVOIDANCE_FACTOR", 0.0); // If negative, this is a % increase. If positive, this is a % decrease
	defineConstant("INBREEDING_FECUNDITY_PENALTY", 0.0); // Ranges from 0 - 1. Always a % decrease
	defineConstant("REPRISING_BOUNDARIES", T); // If F, toroidal boundaries are used
	
	// Release specifics:
	defineConstant("HETEROZYGOUS_DROP", T);
	defineConstant("NO_DROP", F);
	defineConstant("CIRCLE_DROP", F);
	defineConstant("LEFT_EDGE_DROP", F);
	defineConstant("UNIFORM_DROP", F);
	defineConstant("CORNER_DROP",F);
	defineConstant("WT_START",F);
	defineConstant("X_LINKED_DRIVE", T);
	defineConstant("CAPACITY", 100000);
	defineCfgParam("INTRODUCTION",0.005);
	defineConstant("DROP_SIZE",asInteger(INTRODUCTION*CAPACITY/(1-INTRODUCTION)));
	
	// */    // End header.
	
	// Below are defaults that will not change:
	defineConstant("BASELINE_HOMING_SUCCESS_RATE", 1.0);
	defineConstant("EQUILIBRIUM_WT_ALLELE_THRESHOLD", 0.8*2*CAPACITY);
	defineConstant("GRNA_SATURATION_SIMULATED", F);
	defineConstant("HOMING_EDGE_EFFECT", 0.0);
	defineConstant("LATE_GERMLINE_RESISTANCE_RATE", 0.0);
	defineConstant("MALE_ONLY_PROMOTER", F);
	defineConstant("NUM_CUT_PHASES", 1);
	defineConstant("HAPLOLETHAL", F);
	defineConstant("HAPLOSUFFICIENT",T);
	defineConstant("MALE_ONLY_DROP", F);
	defineConstant("FEMALE_ONLY_DROP", F);
	
    // Fitness parameters:
   defineCfgParam("DD_FITNESS_VALUE", 1.00);
   defineCfgParam("DX_FITNESS_VALUE", sqrt(DD_FITNESS_VALUE));
   defineCfgParam("SOMATIC_FITNESS_MUTLIPLIER_F", 1.0);
   defineCfgParam("SOMATIC_FITNESS_MUTLIPLIER_M", 1.0);
	
	// For mortality rate as a function of age:
	// Some females are allowed to survive two generations:
	defineConstant("RATE_FEMALES_SURVIVE", 0.0);
	
	// This simulation will use a non-Wright Fisher model.
	initializeSLiMModelType("nonWF");
	
	
	// Four variations: wild type, drive, r1 resistance, r2 resistance.
	wt = initializeMutationType("m1", 0.5, "f", 0.0);//野生型
	dr = initializeMutationType("m2", 0.5, "f", 0.0);
	r1 = initializeMutationType("m3", 0.5, "f", 0.0);
	r2 = initializeMutationType("m4", 0.5, "f", 0.0);
	cut = initializeMutationType("m5", 0.5, "f", 0.0);
	gap = initializeMutationType("m6", 0.5, "f", 0.0);
	variations = c(wt, dr, r1, r2, cut, gap);
	
	// Variations are all part of g1 genome element.
	initializeGenomicElementType("g1", variations, c(1, 1, 1, 1, 1, 1));
	
	// Element is NUM_GRNAS long, each spot on the element representing a GRNA target location.
	initializeGenomicElement(g1, 0, NUM_GRNAS - 1);
	
	// These mutations overwrite one another.
	variations.mutationStackPolicy = "l";
	variations.mutationStackGroup = 1;
	
	// No mutation in this model.
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.0);
	
	// Simulate sexual reproduction: A for autosome.
	initializeSex("A");
}

//// A HELPER FUNCTION FOR SETTING CONSTANTS THAT MIGHT BE CONFIGURED VIA COMMAND LINE.
function (void) defineCfgParam(string$ name, lifs value) {
    if (!exists(name))
        defineConstant(name, value);
}
//// FUNCTION FOR EVALUATING POPULATION SUPPRESSION WITH RECESSIVE FEMALE or MALE STERILITY STYLE SUPPRESSION.
function (logical)isRecessiveSterilitySuppressed(o<Individual>$ ind) {
	// Check both chromosomes for drive and type 2 resistance allele. These are the only variants that affect suppression.
	// Individual cannot reproduce if both chromosomes have either a drive or an r2.
	if ((ind.genome1.countOfMutationsOfType(m2) == NUM_GRNAS | ind.genome1.countOfMutationsOfType(m4) > 0) & (ind.genome2.countOfMutationsOfType(m2) == NUM_GRNAS| ind.genome2.countOfMutationsOfType(m4) > 0))
		return T;
	return F;
}

//// FUNCTION FOR FORMING A RESISTANCE ALLELE AT A GIVEN LOCUS.
function (void)addResistanceAllele(o<Genome>$ genome, i$ locus) {
	// Resistance alleles form at a specified rate.	m3 is r1, m4 is r2.
	genome.addNewDrawnMutation(ifelse((runif(1) < R1_OCCURRENCE_RATE), m3,m4), locus);
}

//// FUNCTION FOR CAS9 EFFECTS IN THE GERMLINE.
function (void)germline(o<Genome>$ child_chromosome, o<Individual>$ parent, f$ resistance_rate) {
	// Determine presence of drive in this parent.
	parent_drive_count = sum(parent.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
	// If parent doesn't have drive allele, nothing happens in germline.
	if (!parent_drive_count)
		return;
	
	// Chromosome must have wt to cut, or nothing happens.
	if (child_chromosome.countOfMutationsOfType(m1)==0)
		return;
	
	// Using the resistance rate passed to the function,
	// determine the per phase cut rate.
	grna_factor = 1;
	if (GRNA_SATURATION_SIMULATED)
		grna_factor = NUM_GRNAS;
	per_phase_cut_rate = 1 - (1 - resistance_rate)^(1 / (NUM_CUT_PHASES * grna_factor));
	
	// Determine if cas9 cuts the chromosome in the germline.
	casCut(child_chromosome, per_phase_cut_rate);
}

//// FUNCTION FOR CAS9 EFFECTS IN EMBRYO.
function (void)embryo(o<Genome>$ child_chromosome_1, o<Genome>$ child_chromosome_2, o<Individual>$ mother) {
	// Determine presence of drive in this mother.
	mother_drive_count = sum(mother.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
	// If mother doesn't have drive allele, nothing happens in embryo.
	if (!mother_drive_count)
		return;
	
	// Determine the per phase cut rate.
	if (HOMING_DRIVE & sum(mother.genomes.countOfMutationsOfType(m1) == NUM_GRNAS) == 1)
		// Special case for homing drive individual that is dr/wt based on experimental data.
		cas_factor = 1.82;
	grna_factor = 1;
	if (GRNA_SATURATION_SIMULATED)
		grna_factor = NUM_GRNAS;
	per_phase_cut_rate = 1 - (1 - EMBRYO_RESISTANCE_CUT_RATE)^(mother_drive_count / (NUM_CUT_PHASES * grna_factor));
	
	// Then pass this rate as an argument to  the casCut funtion to
	// determine if cas9 cuts in the embryo for each chromosome.
	casCut(child_chromosome_1, per_phase_cut_rate);
	casCut(child_chromosome_2, per_phase_cut_rate);
}

//// FUNCTION FOR CAS9 CUTTING A TARGET CHROMOSOME.
function (void)casCut(o<Genome>$ chromosome, f$ per_phase_cut_rate) {
	// If chromosome has no wild type targets to cut, cas9 does nothing.
	if (chromosome.countOfMutationsOfType(m1)==0)
		return;
	
	// Vector of possible loci for cas9 to cut:
	wt_loci = chromosome.positionsOfMutationsOfType(m1);
	
	// In each cut phase...
	for (i in seqLen(NUM_CUT_PHASES)) {
		// At each possible locus...
		for (j in seqAlong(wt_loci)) {
			// Check to see if cas9 cuts...
			if (runif(1) < per_phase_cut_rate) {
				// Convert the locus temporarily to an m5,
				// representing that this site is being cut.
				chromosome.addNewDrawnMutation(m5, wt_loci[j]);
			}
		}//这里已经全切完了，全部标注为m5
		// If any cuts were made...
		if (chromosome.countOfMutationsOfType(m5))
		{
			cut_loci = chromosome.positionsOfMutationsOfType(m5);
			// If just one cut is made, create an R1 or R2 resistance allele.
			if (chromosome.countOfMutationsOfType(m5) == 1)
				addResistanceAllele(chromosome, cut_loci[0]);
			else {
				// If multiple cuts are made in the same cut phase, loss of
				// function results. Convert leftmost site to m4 (R2)
				// everything else through the rightmost site to m6 (cut).
				number_of_cuts = cut_loci[size(cut_loci) - 1] - cut_loci[0];
				for (index in seqLen(number_of_cuts))
					chromosome.addNewDrawnMutation(m6, cut_loci[0] + index + 1);
				chromosome.addNewDrawnMutation(m4, cut_loci[0]);
			}
			// Because some wt loci may have been cut out of the
			// chromosome, remake the vector of possible cut sites.
			if (chromosome.countOfMutationsOfType(m1) == 0)
				return;
			wt_loci = chromosome.positionsOfMutationsOfType(m1);
		}
	}
}

//// FUNCTION FOR SIMULATING HOMING THAT OCCURS DURING HOMOLOGY DIRECTED REPAIR.
function (void)hdr(o<Genome>$ chromosome, o<Individual>$ parent) {
	// Determine presence of drive in this parent. If parent doesn't have drive allele, nothing happens in germline.
	if (parent.countOfMutationsOfType(m2)==0)
		return;
	
	// If chromosome has no wild type targets to cut, cas9 does nothing.
	if (chromosome.countOfMutationsOfType(m1)==0)
		return;
	
	// Rate of cutting occurs at the HOMING_PHASE_CUT_RATE, modified by gRNA saturation, if toggled on.
	cut_rate = HOMING_PHASE_CUT_RATE;
	if (GRNA_SATURATION_SIMULATED)
		cut_rate = 1 - (1 - HOMING_PHASE_CUT_RATE)^(1/NUM_GRNAS);
	
	// Vector of possible loci.
	wt_loci = chromosome.positionsOfMutationsOfType(m1);
	
	// At each possible locus...
	for (i in seqAlong(wt_loci))
		// Check to see if cas9 cuts...
		if (runif(1) < cut_rate)
			// Convert the locus temporarily to an m5,
			// representing that this site is being cut.
			chromosome.addNewDrawnMutation(m5, wt_loci[i]);
	
	// If any cuts were made...
	if (chromosome.countOfMutationsOfType(m5)) {
		// Determine how extreme the cuts are relative to the target package (the drive).
		cut_loci = chromosome.positionsOfMutationsOfType(m5);
		leftmost_cut_index = cut_loci[0];
		rightmost_cut_index = cut_loci[size(cut_loci) - 1];
		// Sections that have already been cut out of the chromosome
		// also contribute to the size of the cut section.
		missing_loci = chromosome.positionsOfMutationsOfType(m6);
		// Adjusted indecies are amounts by which the cut ends differ
		// from the perfect cut that spans the entire target area.
		adjusted_left_index = leftmost_cut_index - sum(missing_loci < leftmost_cut_index);
		rightmost_cut_index = rightmost_cut_index + sum(missing_loci > rightmost_cut_index);
		adjusted_right_index = NUM_GRNAS - 1 - rightmost_cut_index;
		
		successful_homing_rate = BASELINE_HOMING_SUCCESS_RATE * (1 - HOMING_EDGE_EFFECT * adjusted_left_index) * (1 - HOMING_EDGE_EFFECT * adjusted_right_index);
		
		// Check to see if homing succeeds.
		if (runif(1) < successful_homing_rate)
			for (i in seqLen(NUM_GRNAS))
				chromosome.addNewDrawnMutation(m2, i);
		else {
			// A small percentage of individuals have complete failures of the homing drive,
			// resulting in the entire section of the chromosome becoming a resistance allele.
			total_failure_avoidance_rate = 0.9 * (1 - 0.1 * adjusted_left_index) * (1 - 0.1 * adjusted_right_index);
			
			if (runif(1) < total_failure_avoidance_rate) {
				// Some catastrophic failures become all R1, at the following rate:
				total_r1_rate = 0.001 * (1 + adjusted_right_index - adjusted_left_index);
				// All-R1 catastrophic failures occur only in HAPLOSUFFICIENT or HAPLOSLETHAL drives.
				if (runif(1) < total_r1_rate & (HAPLOLETHAL | HAPLOSUFFICIENT))
					for (i in seqLen(NUM_GRNAS))
						chromosome.addNewDrawnMutation(m3, i);
				else
					for (i in seqLen(NUM_GRNAS))
						chromosome.addNewDrawnMutation(m4, i);
			}
			// If neither homing nor a catastrophic failure occur, normal repair happens.
			else {
				// If just one cut was made, create an R1 or R2 resistance allele.
				if (chromosome.countOfMutationsOfType(m5) == 1)
					addResistanceAllele(chromosome, cut_loci[0]);
				else {
					// If mutlple cuts were made, leftmost site to m4 (R2),
					// everthing else through the rightmost site to m6 (cut).
					number_of_cuts = cut_loci[size(cut_loci) - 1] - cut_loci[0];
					for (index in seqLen(number_of_cuts))
						chromosome.addNewDrawnMutation(m6, cut_loci[0] + index + 1);
					chromosome.addNewDrawnMutation(m4, cut_loci[0]);
				}
			}
		}
	}
}

//// FUNCTION TO OVERWRITE ONE GENOME WITH ANOTHER.
function (void)copy_genome(o<Genome>$ source, o<Genome>$ destination) {
	for (i in seqAlong(source.positionsOfMutationsOfType(m1))) //m1 loci (wt)
		destination.addNewDrawnMutation(m1, source.positionsOfMutationsOfType(m1)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m2))) //m2 loci (dr)
		destination.addNewDrawnMutation(m2, source.positionsOfMutationsOfType(m2)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m3))) //m3 loci (r1)
		destination.addNewDrawnMutation(m3, source.positionsOfMutationsOfType(m3)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m4))) //m4 loci (r2)
		destination.addNewDrawnMutation(m4, source.positionsOfMutationsOfType(m4)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m5))) //m5 loci (cut)
		destination.addNewDrawnMutation(m5, source.positionsOfMutationsOfType(m5)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m6))) //m6 loci (gap)
		destination.addNewDrawnMutation(m6, source.positionsOfMutationsOfType(m6)[i]);
}


//// RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {
    // Representation of the value of the two chromosomes.
    fitness_value = 1.0;

    // Check both chromosomes for drive and type 2 resistance allele.
    // These are the only variants that affect fitness.
    drive_on_1 = ind.genome1.countOfMutationsOfType(m2) == NUM_GRNAS;
    drive_on_2 = ind.genome2.countOfMutationsOfType(m2) == NUM_GRNAS;
    res2_on_1 = ind.genome1.countOfMutationsOfType(m4) > 0;
    res2_on_2 = ind.genome2.countOfMutationsOfType(m4) > 0;
    wt_1 = ind.genome1.countOfMutationsOfType(m1) > 0;
    wt_2 = ind.genome2.countOfMutationsOfType(m1) > 0;

    somatic_fitness_mult = 1;
    if (ind.sex == "F")
        somatic_fitness_mult = SOMATIC_FITNESS_MUTLIPLIER_F;
    somatic_fitness_mult = 1;
    if (ind.sex == "M")
        somatic_fitness_mult = SOMATIC_FITNESS_MUTLIPLIER_M;
    // Check both chromosomes for the drive.
    if (drive_on_1) {
        fitness_value = DX_FITNESS_VALUE;
        if (wt_1 | wt_2)
            fitness_value = fitness_value * somatic_fitness_mult;
    }
    if (drive_on_2) {
        fitness_value = DX_FITNESS_VALUE;
        if (wt_1 | wt_2)
            fitness_value = fitness_value * somatic_fitness_mult;
    }
    if (drive_on_1 & drive_on_2)
        fitness_value = DD_FITNESS_VALUE;
    // Return fitness for individual with this genotype.
    return fitness_value;
}


//// REPRODUCTION RULES FOR EACH FEMALE.
reproduction(NULL, "F")
{
	// First, evaluate whether reproduction is suppressed by a population suppression drive,
	// Then, select a mate based on fitness. Then generate offspring.
	
	// Check whether the female is sterile.
	if (RECESSIVE_FEMALE_STERILE_SUPPRESSION_DRIVE)
		if (isRecessiveSterilitySuppressed(individual))
			return;
	
    attempt_no = 0;
    while (1) {
        // First, select a random potential mate.
        selected_mate = subpop.sampleIndividuals(1, sex="M");
        if (!selected_mate.size())
            return;  // No available mates.

        // Determine attractiveness of potential mate.
        mate_attractiveness = genotypeFitness(selected_mate);

        // Determine if this mate is chosen, based on attractiveness.
        if (runif(1) < mate_attractiveness)
            break;  // Select this mate.
        // After ten candidates fail, female gives up.
        attempt_no = attempt_no + 1;
        if (attempt_no == 9)
            return;
    } // Mate has now been selected.
	
	// Amount of competition faced per expected competition.
    capacity_fitness_scaling = LOW_DENSITY_GROWTH_RATE / (((LOW_DENSITY_GROWTH_RATE - 1) * p1.individualCount / CAPACITY) + 1);
    p = genotypeFitness(individual) * capacity_fitness_scaling * 2 / 50 / (1 + RATE_FEMALES_SURVIVE);
	
	
	num_offspring = rbinom(1, 50, p);
	
	// Check whether the male is sterile.
	if (RECESSIVE_MALE_STERILE_SUPPRESSION_DRIVE) {
		if (isRecessiveSterilitySuppressed(selected_mate))
			num_offspring = 0;
	}
	
	for (i in seqLen(num_offspring)) {
		// Add offspring to the subpopulation.
		offspring = subpop.addCrossed(individual, selected_mate);
	}
}


//// GENE DRIVE IMPLEMENTATION RULES THAT OCCUR IN EVERY CHILD.
1: modifyChild() {

    if (X_LINKED_DRIVE) {
        if(child.sex == "M")
            copy_genome(parent2Genome2, child.genome2);
        if(child.sex == "F")
            copy_genome(parent2Genome1, child.genome2);
    }
	
	if (HOMING_DRIVE) {
		// Apply effects that happen in the germline.
		// First, resistance alleles form.
		if (!MALE_ONLY_PROMOTER)
			germline(childGenome1, parent1, GERMLINE_RESISTANCE_RATE);
		germline(childGenome2, parent2, GERMLINE_RESISTANCE_RATE);
		// Next, homology directed repair allows for homing to occur.
		if (!MALE_ONLY_PROMOTER)
			hdr(childGenome1, parent1);
		hdr(childGenome2, parent2);
		// Then additional resistance alleles form.
		if (!MALE_ONLY_PROMOTER)
			germline(childGenome1, parent1, LATE_GERMLINE_RESISTANCE_RATE);
		germline(childGenome2, parent2, LATE_GERMLINE_RESISTANCE_RATE);
		
		// Apply effects that happen in the embryo.
		if (!MALE_ONLY_PROMOTER)
			embryo(childGenome1, childGenome2, parent1);
	}
	

	
	// Any combination of 2 drive or r2 alleles will be lethal in the embryo
	if (RECESSIVE_BOTH_SEX_LETHAL_SUPPRESSION_DRIVE) {
		if ((childGenome1.countOfMutationsOfType(m2) == NUM_GRNAS | childGenome1.countOfMutationsOfType(m4) > 0) & (childGenome2.countOfMutationsOfType(m2) == NUM_GRNAS| childGenome2.countOfMutationsOfType(m4) > 0))
			return F;
	}
	
	if (X_LINKED_DRIVE) {
		if(child.sex == "M")
			copy_genome(parent2Genome2, child.genome2);

	}
	
	    // Offspring may be non viable offspring if drive
    // is haplolethal or recesive lethal.
    // Booleans describing presence of R2 allele:
    res_2_c_1 = childGenome1.countOfMutationsOfType(m4) > 0;
    res_2_c_2 = childGenome2.countOfMutationsOfType(m4) > 0;
    // If drive is haplolethal:
    // Offspring not viable if r2 on either chromosome.
    if (HAPLOLETHAL & (res_2_c_1 | res_2_c_2))
        return F;
    // If drive is recessive lethal:
    // Offspring not viable if r2 on both chromosomes.
    if(X_LINKED_DRIVE){
    	if (HAPLOSUFFICIENT & res_2_c_1 & res_2_c_2 & (child.sex == "F"))
      	return F;
    	if (HAPLOSUFFICIENT & res_2_c_1 & (child.sex == "M"))
       	return F;	
    }
    else{
    	if (HAPLOSUFFICIENT & res_2_c_1 & res_2_c_2)
        return F; 
    }   
	
	return T;
}




//// SURVIVAL RULES FOR THE SIMULATION BASED ON AGE AND RULES FOR MOVEMENT.
late() {
	all = sim.subpopulations.individuals;
	is_male = all.sex=="M";
	
	// By default, we have non-overlapping generations
	all[is_male].fitnessScaling = 0.0;
	females = all[!is_male];
	females.fitnessScaling = 0.0;
	
	// User may allow some females to survive
	if (RATE_FEMALES_SURVIVE > 0.0) {
		num_survive = round(RATE_FEMALES_SURVIVE*size(females));
		fem_survive = sample(females, num_survive);
		fem_survive.fitnessScaling = 1.0;
	}
	
	surviving_inds = all[all.fitnessScaling > 0.0];
	
}


//// START THE SIMULATION BY ADDING AN INITIAL WILD POPULATION.
1 {
	// Start with a population of wild type flies.
	sim.addSubpop("p1", CAPACITY);
	all= p1.individuals;
	all.genomes.addNewDrawnMutation(m1,seqLen(NUM_GRNAS));
	sim.setValue("timer", "start");	
	}

//// DROP A GROUP OF MODIFIED INDIVIDUALS INTO THE POPULATION.
10 {
    // Add a drop of modified individuals to p1.
    if (MALE_ONLY_DROP)
        // Drop a population of only males.
        sim.addSubpop("p2", DROP_SIZE, 1.0);
    else if (FEMALE_ONLY_DROP)
        // Drop a population of only females.
        sim.addSubpop("p2", DROP_SIZE, 0.0);
    else
        sim.addSubpop("p2", DROP_SIZE);

    drop = p2.individuals;

    // Now set the drop individuals to the correct genotypes:
    for (i in seqLen(NUM_GRNAS))
        drop.genomes.addNewDrawnMutation(m2, i);

    // For heterozygous drop, one of the chromosomes is set to wild type:
    if (HETEROZYGOUS_DROP)
        for (i in seqLen(NUM_GRNAS))
            drop.genome2.addNewDrawnMutation(m1, i);

    // In X_LINKED_DRIVE males' genome2 (from father) is always wt.
    if (X_LINKED_DRIVE) {
        males = (drop.sex == "M");
        // Set all Y chromosomes to wt.
        for (i in seqLen(NUM_GRNAS))
            drop[males].genome2.addNewDrawnMutation(m1, i);
    }

    // Now that genes have been set, move all the individuals from the drop into p1:
    p1.takeMigrants(drop);
    p2.removeSubpopulation();
}

//// PROGRAM OUTPUT.
10:late() {
    num_wt = 0;
    num_dr = 0;
    num_complete_r1 = 0;
    num_partial_r1 = 0;
    num_complete_r2 = 0;
    num_partial_r2 = 0;
    all = sim.subpopulations.individuals;
    males = all[all.sex == "M"];
    females = all[all.sex == "F"];
    num_wt = sum(males.genome1.countOfMutationsOfType(m1) == NUM_GRNAS) + sum(females.genomes.countOfMutationsOfType(m1) == NUM_GRNAS);
    num_dr = sum(males.genome1.countOfMutationsOfType(m2) == NUM_GRNAS) + sum(females.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
	 num_has_drive =  sum(females.genome1.countOfMutationsOfType(m2) == NUM_GRNAS
                      | females.genome2.countOfMutationsOfType(m2) == NUM_GRNAS) + 											sum(males.genome1.countOfMutationsOfType(m2) == NUM_GRNAS);
    rate_wt = num_wt / (2 * size(all) - size(males));
    rate_dr = num_dr / (2 * size(all) - size(males));
    rate_has_drive = num_has_drive / (size(all));
    pop_size = size(all);

	this_gen=sim.generation-10;
	target=all[all.countOfMutationsOfType(m2) != 0];//找出驱动基因已经波及的个体
	tx=target.x;
	if(this_gen == 0){
		catn("Special_Generation:"+this_gen);
		catn("Introduction_Frequency:"+rate_has_drive);
		catn("Special_Pop_size:"+pop_size);
		catn("Special_Drive_Allele_Gene_Frequency:"+rate_dr);
		catn("Special_Drive_Gene_Carrying_Frequency:"+rate_has_drive);
		catn("Special_Num_Drive_Gene:"+num_dr);
		catn("Special_Num_Wild_Gene:"+num_wt);
		catn("Special_Wild_Type_Gene_Frequency:"+rate_wt);
	}else{
		catn("Generation:"+this_gen);
		catn("Pop_size:"+pop_size);
		catn("Drive_Allele_Gene_Frequency:"+rate_dr);
		catn("Drive_Gene_Carrying_Frequency:"+rate_has_drive);
		catn("Num_Drive_Gene:"+num_dr);
		catn("Num_Wild_Gene:"+num_wt);
		catn("Wild_Type_Gene_Frequency:"+rate_wt);
	}
}

//// If there was a drop, stop simulation after 1000 generations if not stopped already
80 late() {
		catn("Generation:NAN");
		catn("Pop_size:NAN");
		catn("Drive_Allele_Gene_Frequency:NAN");
		catn("Drive_Gene_Carrying_Frequency:NAN");
		catn("Num_Drive_Gene:NAN");
		catn("Num_Wild_Gene:NAN");
		catn("Wild_Type_Gene_Frequency:NAN");
	   sim.simulationFinished();
}
