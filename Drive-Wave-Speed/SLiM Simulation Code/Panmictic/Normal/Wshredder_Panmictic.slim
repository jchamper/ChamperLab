initialize() {
    // Fitness parameters:
    // Fitness parameters:
    defineCfgParam("DD_FITNESS_VALUE", 1.0);
    defineCfgParam("DX_FITNESS_VALUE", sqrt(DD_FITNESS_VALUE));
    defineCfgParam("SOMATIC_FITNESS_MUTLIPLIER_F", 1.0);
    defineCfgParam("SOMATIC_FITNESS_MUTLIPLIER_M", 1.0);
	 defineCfgParam("DRIVE_EFFICIENCY",1.00);
    
    // Drive type:
 	 defineConstant("W_SHREDDER",T);
    
    // Ecology and drop parameters:
    defineCfgParam("INTRODUCTION",0.025);
    defineConstant("CAPACITY", 100000);
    defineConstant("DROP_SIZE",asInteger(INTRODUCTION*CAPACITY/(1-INTRODUCTION)));
   
 	 //Below are dimensioal sets.
	 defineConstant("DENSITY_INTERACTION_DISTANCE", 0.01);
	 defineConstant("EXPECTED_ADULT_COMPETITION", CAPACITY *DENSITY_INTERACTION_DISTANCE);
	 defineCfgParam("LOW_DENSITY_GROWTH_RATE", 6.00);


    // For mortality rate as a function of age:
    // Model can be set to allow females to overlap generations.
    defineConstant("RATE_FEMALES_SURVIVE", 0.0);

    // This simulation will use a non-Wright-Fisher model.
    initializeSLiMModelType("nonWF");
    // Four variations: Wild type, drive, r1 resistance, r2 resistance.
    wt = initializeMutationType("m1", 0.5, "f", 0.0);
    dr = initializeMutationType("m2", 0.5, "f", 0.0);
    r1 = initializeMutationType("m3", 0.5, "f", 0.0);
    r2 = initializeMutationType("m4", 0.5, "f", 0.0);

    variations = c(wt, dr, r1, r2);

    // Variations are all part of g1 genome element.
    initializeGenomicElementType("g1", variations, c(1, 1, 1, 1));

    // Element is NUM_GRNAS long, each spot on the element representing a GRNA target location.
    initializeGenomicElement(g1, 0, 0);

    // These variations overwrite one another.
    variations.mutationStackPolicy = "l";
    variations.mutationStackGroup = 1;

    // No mutation in this model.
    initializeMutationRate(0.0);
    initializeRecombinationRate(0.0);

    // Simulate sexual reproduction: A for autosome.
    initializeSex("A");
}

function (void) defineCfgParam(string$ name, lifs value) {
    if (!exists(name))
        defineConstant(name, value);
}

//// AGE BASED SURVIVAL RULES.
late() {
    all = sim.subpopulations.individuals;    
	 all[all.sex=="M"].fitnessScaling = 0.0;
	
	//Females may survive to the next generation at the rate specified by user.

	 females = all[all.sex=="F"];
	 females[females.age > 0].fitnessScaling = 0.0;
	 		females[females.age==0].fitnessScaling = RATE_FEMALES_SURVIVE;
	
	 surviving_inds = all[all.fitnessScaling > 0.0];   
}

//// RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {
    // Representation of the value of the two chromosomes.
    fitness_value = 1.0;

    // Check both chromosomes for drive and type 2 resistance allele.
    // These are the only variants that affect fitness.
    drive_on_1 = ind.genome1.countOfMutationsOfType(m2) > 0;
    drive_on_2 = ind.genome2.countOfMutationsOfType(m2) > 0;
    res2_on_1 = ind.genome1.countOfMutationsOfType(m4) > 0;
    res2_on_2 = ind.genome2.countOfMutationsOfType(m4) > 0;
    wt_1 = ind.genome1.countOfMutationsOfType(m1) > 0;
    wt_2 = ind.genome2.countOfMutationsOfType(m1) > 0;

    somatic_fitness_mult = 1;
    if (ind.sex == "F")
        somatic_fitness_mult = SOMATIC_FITNESS_MUTLIPLIER_F;
    if (ind.sex == "M")
        somatic_fitness_mult = SOMATIC_FITNESS_MUTLIPLIER_M;
    // Check both chromosomes for the drive.
	 if(ind.sex == "M"){
	     if (drive_on_1) {
        		fitness_value = DX_FITNESS_VALUE;
        		if (wt_1 | wt_2)
            		fitness_value = fitness_value * somatic_fitness_mult;
    		}
    		if (drive_on_2) {
        		fitness_value = DX_FITNESS_VALUE;
        		if (wt_1 | wt_2)
            		fitness_value = fitness_value * somatic_fitness_mult;
    		}
    		if (drive_on_1 & drive_on_2)
        		fitness_value = DD_FITNESS_VALUE;
    			// Return fitness for individual with this genotype.
    		return fitness_value;
    }
    if(ind.sex == "F"){
    		if(drive_on_2)
    			fitness_value = DD_FITNESS_VALUE;
    		return fitness_value;
    }
}


//// REPRODUCTION RULES FOR EACH FEMALE.
reproduction(NULL, "F") {
    attempt_no = 0;
    while (1) {
        // First, select a random potential mate.
        selected_mate = subpop.sampleIndividuals(1, sex="M");
        if (!selected_mate.size())
            return;  // No available mates.

        // Determine attractiveness of potential mate.
        mate_attractiveness = genotypeFitness(selected_mate);

        // Determine if this mate is chosen, based on attractiveness.
        if (runif(1) < mate_attractiveness)
            break;  // Select this mate.
        // After ten candidates fail, female gives up.
        attempt_no = attempt_no + 1;
        if (attempt_no == 9)
            return;
    }
    // Mate has now been selected.

    // Fecundity is based on both the crowding/competition in the system, as well as female fitness.
    // Number of offspring number based on binomial distrobution.
    capacity_fitness_scaling = LOW_DENSITY_GROWTH_RATE / (((LOW_DENSITY_GROWTH_RATE - 1) * p1.individualCount / CAPACITY) + 1);
    p = genotypeFitness(individual) * capacity_fitness_scaling * 2 / 50 / (1 + RATE_FEMALES_SURVIVE);
    num_offspring = rbinom(1, 50, p);
    for (i in seqLen(num_offspring)) {
        // Add offspring to the subpopulation.
        if (W_SHREDDER & individual.countOfMutationsOfType(m2)>0)
          offspring = subpop.addCrossed(individual, selected_mate, (0.5 /(0.5*(2 - DRIVE_EFFICIENCY))));
        if(individual.countOfMutationsOfType(m2) == 0)
        	 offspring = subpop.addCrossed(individual, selected_mate);
       		
    }
}



////// GENE DRIVE IMPLEMENTATION RULES THAT OCCUR IN EVERY CHILD.
1: modifyChild() {
    if (W_SHREDDER) {
        // Genome1 is the Z, Genome2 is the W in females.
		if(parent1.sex == "F"){
			mother = parent1;
			father = parent2;
		}
		else{
			mother = parent2;
			father = parent1;
		}
        if (child.sex == "M") {
            // Force inheritence of Z from mother.
            if (mother.genome2.countOfMutationsOfType(m1) > 0)
                childGenome1.addNewDrawnMutation(m1, 0);
            if (mother.genome2.countOfMutationsOfType(m2) > 0)
                childGenome1.addNewDrawnMutation(m2, 0);
        }
        if (child.sex == "F")
            // Force inheritence of W from mother. The only possible variation for W is wt.
            childGenome1.addNewDrawnMutation(m1, 0);
    }
    return T;
}



//// START THE SIMULATION BY ADDING AN INITIAL WILD POPULATION.
1 {
	// Start with a population of wild type flies.
	sim.addSubpop("p1", CAPACITY);
	all= p1.individuals;
	all.genomes.addNewDrawnMutation(m1,0);
	sim.setValue("timer", "start");	
	}

//// DROP A GROUP OF MODIFIED INDIVIDUALS INTO THE POPULATION.
10 {
    // Add a drop of modified individuals to p1.

    sim.addSubpop("p2", DROP_SIZE,1.0);
    drop = p2.individuals;
	 drop.genome1.addNewDrawnMutation(m2, 0);
	 drop.genome2.addNewDrawnMutation(m1, 0);
    // Now that genes have been set, move all the individuals from the drop into p1:
    p1.takeMigrants(drop);
    p2.removeSubpopulation();
}

//// PROGRAM OUTPUT.
10:late() {
	all = sim.subpopulations.individuals;
	pop_size = size(all);
	this_gen = sim.generation-10;
	males = all[all.sex == "M"];
	females = all[all.sex == "F"];
	num_z = 2*size(males) + size(females);
	num_dr = sum(males.genomes.countOfMutationsOfType(m2))+sum(females.genome2.countOfMutationsOfType(m2));
	num_wt = sum(males.genomes.countOfMutationsOfType(m1))+sum(females.genome2.countOfMutationsOfType(m1));
	rate_dr = num_dr/num_z;
	rate_wt = num_wt/num_z;
	n=0;
	if(this_gen == 0){
		catn("Special_Generation:"+this_gen);
		catn("Special_Pop_size:"+pop_size);
		catn("Special_Drive_Allele_Gene_Frequency:"+rate_dr);
		catn("Special_Num_Drive_Gene:"+num_dr);
		catn("Special_Num_Wild_Gene:"+num_wt);
		catn("Special_Wild_Type_Gene_Frequency:"+rate_wt);
	}else{
		catn("Generation:"+this_gen);
		catn("Pop_size:"+pop_size);
		catn("Drive_Allele_Gene_Frequency:"+rate_dr);
		catn("Num_Drive_Gene:"+num_dr);
		catn("Num_Wild_Gene:"+num_wt);
		catn("Wild_Type_Gene_Frequency:"+rate_wt);
	}	
}

//// PROGRAM END CONDITION.
510 late() {
		catn("Generation:NAN");
		catn("Pop_size:NAN");
		catn("Drive_Allele_Gene_Frequency:NAN");
		catn("Num_Drive_Gene:NAN");
		catn("Num_Wild_Gene:NAN");
		catn("Wild_Type_Gene_Frequency:NAN");
    	sim.simulationFinished();
}
