// Author: Sam Champer and Isabel Kim.
// Created in association with Jackson Champer and the Messer lab.

// A framework for simulating many different gene drives
// with varying parameters, intended to be configured by
// altering the heading below, or by dynamically varying
// values in the header using an associated Python file.

// These gene drives are located on a sex chromosome and target the 
// opposite sex chromosome. 
// This file may be used to run the X-shredder drive or Y-shredder drive.

// The following header to be replaced via python,
// such that these values can be varied across multiple runs of slim.

initialize() {
	
	// Drive parameters:
	defineConstant("X_SHREDDER", T);
	defineConstant("Y_SHREDDER",F);
	defineConstant("DRIVE_FITNESS_VALUE", 1.00);
	defineConstant("EMBRYO_RESISTANCE_RATE", 0.0);
	defineConstant("GERMLINE_RESISTANCE_RATE", 1.00);
	defineConstant("NUM_GRNAS", 1);
	defineConstant("R1_OCCURRENCE_RATE", 0.0);
	
	// Ecology parameters:
	defineConstant("LOW_DENSITY_GROWTH_RATE", 6.0);
	defineConstant("INBREEDING_AVOIDANCE_FACTOR", 0.0); // If negative, this is a % increase. If positive, this is a % decrease
	defineConstant("INBREEDING_FECUNDITY_PENALTY", 0.0); // Ranges from 0 - 1. Always a % decrease
	
	// Release specifics, depending on the drive:
	defineConstant("HETEROZYGOUS_DROP", Y_SHREDDER);
	defineConstant("NO_DROP", F);
	defineConstant("FEMALE_ONLY_DROP", Y_SHREDDER);
	defineConstant("MALE_ONLY_DROP", X_SHREDDER);
	
	defineConstant("CAPACITY", 100000);
	defineCfgParam("INTRODUCTION",0.005);
	defineConstant("DROP_SIZE",asInteger(INTRODUCTION*CAPACITY/(1-INTRODUCTION)));
	// */    // End header.
	
	// Below are defaults that will not change:
	defineConstant("GRNA_SATURATION_SIMULATED", F);
	defineConstant("MALE_ONLY_PROMOTER", F);
	defineConstant("NUM_CUT_PHASES", 1);
	defineConstant("R2_FITNESS_VALUE", 1.0);
	
	// For mortality rate as a function of age:
	// Some females are allowed to survive two generations:	
	defineConstant("RATE_FEMALES_SURVIVE", 0.0);
	
	// This simulation will use a non-Wright Fisher model.
	initializeSLiMModelType("nonWF");
	
	// Four variations: Wild type, drive, r1 resistance, r2 resistance.
	wt = initializeMutationType("m1", 0.5, "f", 0.0);
	dr = initializeMutationType("m2", 0.5, "f", 0.0);
	r1 = initializeMutationType("m3", 0.5, "f", 0.0);
	r2 = initializeMutationType("m4", 0.5, "f", 0.0);
	cut = initializeMutationType("m5", 0.5, "f", 0.0);
	gap = initializeMutationType("m6", 0.5, "f", 0.0);
	variations = c(wt, dr, r1, r2, cut, gap);
	
	// Variations are all part of g1 genome element.
	initializeGenomicElementType("g1", variations, c(1, 1, 1, 1, 1, 1));
	
	// Element is NUM_GRNAS long, each spot on the element representing a GRNA target location.
	initializeGenomicElement(g1, 0, NUM_GRNAS - 1);
	
	// These mutations overwrite one another.
	variations.mutationStackPolicy = "l";
	variations.mutationStackGroup = 1;
	
	// No mutation in this model.
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.0);
}

//// A HELPER FUNCTION FOR SETTING CONSTANTS THAT MIGHT BE CONFIGURED VIA COMMAND LINE.
function (void) defineCfgParam(string$ name, lifs value) {
    if (!exists(name))
        defineConstant(name, value);
}

//// FUNCTION FOR FORMING A RESISTANCE ALLELE AT A GIVEN LOCUS.
function (void)addResistanceAllele(o<Genome>$ genome, i$ locus) {
	// Resistance alleles form at a specified rate.	m3 is r1, m4 is r2.
	genome.addNewDrawnMutation(ifelse((runif(1) < R1_OCCURRENCE_RATE), m3,m4), locus);
}

//// FUNCTION FOR CAS9 EFFECTS IN THE GERMLINE.
function (void)germline(o<Genome>$ child_chromosome, o<Individual>$ parent, f$ resistance_rate) {
	// Determine presence of drive in this parent.
	parent_drive_count = sum(parent.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
	// If parent doesn't have drive allele, nothing happens in germline.
	if (!parent_drive_count)
		return;
	
	// Chromosome must have wt to cut, or nothing happens.
	if (child_chromosome.countOfMutationsOfType(m1) == 0)
		return;
	
	// Using the resistance rate passed to the function,
	// determine the per phase cut rate.
	grna_factor = 1;
	if (GRNA_SATURATION_SIMULATED)
		grna_factor = NUM_GRNAS;
	per_phase_cut_rate = 1 - (1 - resistance_rate)^(1 / (NUM_CUT_PHASES * grna_factor));
	
	// Determine if cas9 cuts the chromosome in the germline.
	casCut(child_chromosome, per_phase_cut_rate);
}

//// FUNCTION FOR CAS9 EFFECTS IN EMBRYO.
function (void)embryo(o<Genome>$ child_chromosome_1, o<Genome>$ child_chromosome_2, o<Individual>$ mother) {
	// Determine presence of drive in this mother.
	mother_drive_count = sum(mother.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
	// If mother doesn't have drive allele, nothing happens in embryo.
	if (!mother_drive_count)
		return;
	grna_factor = 1;
	if (GRNA_SATURATION_SIMULATED)
		grna_factor = NUM_GRNAS;
	per_phase_cut_rate = 1 - (1 - EMBRYO_RESISTANCE_RATE)^(mother_drive_count / (NUM_CUT_PHASES * grna_factor));
	
	// Then pass this rate as an argument to  the casCut funtion to
	// determine if cas9 cuts in the embryo for each chromosome.
	casCut(child_chromosome_1, per_phase_cut_rate);
	casCut(child_chromosome_2, per_phase_cut_rate);
}

//// FUNCTION FOR CAS9 CUTTING A TARGET CHROMOSOME.
function (void)casCut(o<Genome>$ chromosome, f$ per_phase_cut_rate) {
	// If chromosome has no wild type targets to cut, cas9 does nothing.
	if (chromosome.countOfMutationsOfType(m1) == 0)
		return;
	
	// Vector of possible loci for cas9 to cut:
	wt_loci = chromosome.positionsOfMutationsOfType(m1);
	
	// In each cut phase...
	for (i in seqLen(NUM_CUT_PHASES)) {
		// At each possible locus...
		for (j in seqAlong(wt_loci)) {
			// Check to see if cas9 cuts...
			if (runif(1) < per_phase_cut_rate) {
				// Convert the locus temporarily to an m5,
				// representing that this site is being cut.
				chromosome.addNewDrawnMutation(m5, wt_loci[j]);
			}
		}
		// If any cuts were made...
		if (chromosome.countOfMutationsOfType(m5)) {
			cut_loci = chromosome.positionsOfMutationsOfType(m5);
			// If just one cut is made, create an R1 or R2 resistance allele.
			if (chromosome.countOfMutationsOfType(m5) == 1)
				addResistanceAllele(chromosome, cut_loci[0]);
			else {
				// If multiple cuts are made in the same cut phase, loss of
				// function results. Convert leftmost site to m4 (R2)
				// everthing else through the rightmost site to m6 (cut).
				number_of_cuts = cut_loci[size(cut_loci) - 1] - cut_loci[0];
				for (index in seqLen(number_of_cuts))
					chromosome.addNewDrawnMutation(m6, cut_loci[0] + index + 1);
				chromosome.addNewDrawnMutation(m4, cut_loci[0]);
			}
			// Because some wt loci may have been cut out of the
			// chromosome, remake the vector of possible cut sites.
			if (chromosome.countOfMutationsOfType(m1) == 0)
				return;
			wt_loci = chromosome.positionsOfMutationsOfType(m1);
		}
	}
}

//// FUNCTION TO OVERWRITE ONE GENOME WITH ANOTHER.
function (void)copy_genome(o<Genome>$ source, o<Genome>$ destination) {
	for (i in seqAlong(source.positionsOfMutationsOfType(m1))) //m1 loci (wt)
		destination.addNewDrawnMutation(m1, source.positionsOfMutationsOfType(m1)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m2))) //m2 loci (dr)
		destination.addNewDrawnMutation(m2, source.positionsOfMutationsOfType(m2)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m3))) //m3 loci (r1)
		destination.addNewDrawnMutation(m3, source.positionsOfMutationsOfType(m3)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m4))) //m4 loci (r2)
		destination.addNewDrawnMutation(m4, source.positionsOfMutationsOfType(m4)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m5))) //m5 loci (cut)
		destination.addNewDrawnMutation(m5, source.positionsOfMutationsOfType(m5)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m6))) //m6 loci (gap)
		destination.addNewDrawnMutation(m6, source.positionsOfMutationsOfType(m6)[i]);
}

//// RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {
	// Representation of the value of the two chromosomes. Check for drive or wt to get the baseline value.
	c1_value = ifelse(ind.genome1.countOfMutationsOfType(m2) == NUM_GRNAS, DRIVE_FITNESS_VALUE, 1.0);
	c2_value = ifelse(ind.genome2.countOfMutationsOfType(m2) == NUM_GRNAS, DRIVE_FITNESS_VALUE, 1.0);
	
	// Check both chromosomes for resistance allele.
	if (ind.genome1.countOfMutationsOfType(m4) > 0)
		c1_value = c1_value * R2_FITNESS_VALUE;
	if (ind.genome2.countOfMutationsOfType(m4) > 0)
		c2_value = c2_value * R2_FITNESS_VALUE;
	
	return ifelse(X_SHREDDER, c2_value, sqrt(c1_value*c2_value));
}


//// REPRODUCTION RULES FOR EACH FEMALE.
reproduction() {
	// First, only sample females for reproduction.
	// Next, evaluate whether reproduction is suppressed by a population suppression drive.
	// Then select a mate based on fitness and generate offspring.
	if (individual.tagF == 1.0) {
		all_neighbors = subpop.sampleIndividuals(subpop.individualCount);
		neighbors = all_neighbors[all_neighbors.tagF == 0.0];
		if (size(neighbors) == 0)
			return;
		attempt_no = 0;
		while (1) {
			// First, select a random mate.
			mate_no = 0;
			if (size(neighbors) > 1)
				mate_no = rdunif(1, max=size(neighbors) - 1);
			selected_mate = neighbors[mate_no];
			// Determine attractiveness of mate.
			mate_attractiveness = 0.5*genotypeFitness(selected_mate);
			
			// Inbreeding avoidance factor represents the percent decrease in attractiveness of a brother if positive
			// and the percent increase in attractiveness of a brother if negative
			
			// Determine if this mate is chosen, based on attractiveness.
			if (runif(1) < mate_attractiveness)
				break;
			
			// After twenty candidates fail, female gives up.
			attempt_no = attempt_no + 1;
			if (attempt_no == 19)
				return;
		} // Mate has now been selected. 
		
		// Amount of competition faced per expected competition.
    capacity_fitness_scaling = LOW_DENSITY_GROWTH_RATE / (((LOW_DENSITY_GROWTH_RATE - 1) * p1.individualCount / CAPACITY) + 1);
    p = genotypeFitness(individual) * capacity_fitness_scaling * 2 / 50 / (1 + RATE_FEMALES_SURVIVE);

		
		num_offspring = rbinom(1, 50, p);
		
		for (i in seqLen(num_offspring)) {
			// Add offspring to the subpopulation.
			offspring = subpop.addCrossed(individual, selected_mate);
		}
	}
}


//// GENE DRIVE IMPLEMENTATION RULES THAT OCCUR IN EVERY CHILD.
1: modifyChild() {
	// First, identify the father, based on which parent had tag 0.0.
	if (parent1.tagF==0.0) {
		father = parent1;
		paternalGenome = childGenome1;
		mother = parent2;
		maternalGenome = childGenome2;
	} else {
		father = parent2;
		paternalGenome = childGenome2;
		mother = parent1;
		maternalGenome = childGenome1;
	}
	
	// If the father had the drive, simulate germline cleavage.
	if (father.countOfMutationsOfType(m2)==0) {
		child.tagF = asFloat(rdunif(1,0,1)); // No drive, so child's sex is random
	} else {
		// First, identify the father's drive genome. 
		// If this is an X_SHREDDER, this should be genome 2
		// If this is a Y_SHREDDER, this should be genome 1.
		if (father.genome1.countOfMutationsOfType(m2) == NUM_GRNAS) {
			fatherDriveGenome = father.genome1;
			fatherWTGenome = father.genome2;
		} else {
			fatherDriveGenome = father.genome2;
			fatherWTGenome = father.genome1; }
		
		// If the child received drive, the child is male.
		child_received_drive = paternalGenome.countOfMutationsOfType(m2) == NUM_GRNAS;
		
		// If the child didn't receive the drive chromosome, then the
		// child received the father's non-drive chromosome, which could have 
		// been cut.
		if (!child_received_drive) {
			germline(paternalGenome, father, GERMLINE_RESISTANCE_RATE);
			
			// If there was a cut, then this gamete wouldn't have been viable.
			// 50% of the time, drive is actually passed. 
			// 50% of the time, call germline resistance again (only exits loop if no cleavage results)
			while (paternalGenome.countOfMutationsOfType(m4) > 0) {
				if (runif(1) < 0.5)
					paternalGenome.addNewDrawnMutation(m2, seqLen(NUM_GRNAS));
				else {
					copy_genome(fatherWTGenome, paternalGenome);
					germline(paternalGenome, father, GERMLINE_RESISTANCE_RATE);
				}
			}
		}
		
		// Update booleans
		child_received_drive = paternalGenome.countOfMutationsOfType(m2)==NUM_GRNAS;
		
		// Drive alleles are on the Y-chromosome for the X_SHREDDER drive
		// and on the X-chromosome for the Y_SHREDDER drive
		if (X_SHREDDER)
			child.tagF = ifelse(child_received_drive, 0.0, 1.0);
		else if (Y_SHREDDER)
			child.tagF = ifelse(paternalGenome.countOfMutationsOfType(m2)==NUM_GRNAS, 1.0, 0.0);
	}
	
	if (Y_SHREDDER)
		embryo(maternalGenome,paternalGenome, mother);
	
	if (paternalGenome.countOfMutationsOfType(m4)) //shred
		return F;
	
	return T;
}




//// SURVIVAL RULES FOR THE SIMULATION BASED ON AGE AND RULES FOR MOVEMENT.
late() {
	all = sim.subpopulations.individuals;
	is_female = all.tagF == 1.0;
	females = all[is_female];
	males = all[!is_female];
	
	// By default, we have non-overlapping generations
	males.fitnessScaling = 0.0;
	females.fitnessScaling = 0.0;
	
	// User may allow some females to survive
	if (RATE_FEMALES_SURVIVE > 0.0) {
		num_survive = round(RATE_FEMALES_SURVIVE*size(females));
		fem_survive = sample(females, num_survive);
		fem_survive.fitnessScaling = 1.0;
	}
	
	surviving_inds = all[all.fitnessScaling > 0.0];

}


//// START THE SIMULATION BY ADDING AN INITIAL WILD POPULATION.
1 {
	// Start with a population of wild type.
	sim.addSubpop("p1", CAPACITY);
	all = p1.individuals;
	all.tagF = asFloat(rdunif(CAPACITY, 0, 1)); // Random sexes
	all.genomes.addNewDrawnMutation(m1, seqLen(NUM_GRNAS));
}


//// DROP A GROUP OF MODIFIED INDIVIDUALS INTO THE POPULATION.
10 {
	
	if (NO_DROP)
		return;
	
	sim.addSubpop("p2", DROP_SIZE);
	drop = p2.individuals;
	
	if (MALE_ONLY_DROP)
		drop.tagF = rep(0.0, DROP_SIZE); // Tag value of 0 acts as male sex
	
	else if (FEMALE_ONLY_DROP)
		drop.tagF = rep(1.0, DROP_SIZE); // Tag value of 1 acts as female sex
	
	else
		drop.tagF = asFloat(rdunif(DROP_SIZE, 0, 1)); // Random sexes
	
	females = (drop.tagF == 1.0);
	males = (drop.tagF == 0.0);
	
	// For the X-shredder, only the Y chromosome has the drive. All X chromosomes should be wt.
	if (X_SHREDDER) {
		drop[females].genomes.addNewDrawnMutation(m1, seqLen(NUM_GRNAS)); // Females cannot get the drive
		drop[males].genome1.addNewDrawnMutation(m1, seqLen(NUM_GRNAS)); // Maternal genome gets wt
		drop[males].genome2.addNewDrawnMutation(m2, seqLen(NUM_GRNAS)); // Paternal genome gets drive
	}
	
	// For the Y-shredder, only the X chromsome has the drive. All Y chromosomes should be wt.
	if (Y_SHREDDER) {
		drop[females].genomes.addNewDrawnMutation(m2, seqLen(NUM_GRNAS)); // Females get drive on both chromosomes
		
		if (HETEROZYGOUS_DROP) // If this is a heterozygous drop, drive females only have the drive on genome1
			drop[females].genome2.addNewDrawnMutation(m1, seqLen(NUM_GRNAS));
		
		drop[males].genome1.addNewDrawnMutation(m2, seqLen(NUM_GRNAS)); // Maternal genome is X; gets the drive
		drop[males].genome2.addNewDrawnMutation(m1, seqLen(NUM_GRNAS)); // Paternal genome is a Y; stays wt
	}
	
	// Move all the individuals from the drop into p1:
	p1.takeMigrants(drop);


}


////PROGRAM OUTPUT AFTER DROP.
10: late() {
	
	// Population counts
    num_wt = 0;
    num_dr = 0;
    num_complete_r1 = 0;
    num_partial_r1 = 0;
    num_complete_r2 = 0;
    num_partial_r2 = 0;
    all = sim.subpopulations.individuals;
    males = all[all.tagF == 0.0];
    females = all[all.tagF == 1.0];
	 num_y = size(males);
	 num_x = size(females)*2 + size(males);
    pop_size = size(all);
    this_gen = sim.generation - 10;
    
	 if(X_SHREDDER){
    	num_wt = sum(males.genome2.countOfMutationsOfType(m1) == NUM_GRNAS);
    	num_dr = sum(males.genome2.countOfMutationsOfType(m2) == NUM_GRNAS);
		num_has_drive = sum(males.genome2.countOfMutationsOfType(m2) == NUM_GRNAS);
		rate_dr = num_dr/num_y;
		rate_wt = num_wt/num_y;	 	
	 } else if (Y_SHREDDER) {
    	num_wt = sum(males.genome1.countOfMutationsOfType(m1) == NUM_GRNAS) + sum(females.genomes.countOfMutationsOfType(m1) == NUM_GRNAS);
    	num_dr = sum(males.genome1.countOfMutationsOfType(m2) == NUM_GRNAS) + sum(females.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);	 	
		num_has_drive =  sum(females.genome1.countOfMutationsOfType(m2) == NUM_GRNAS
                      | females.genome2.countOfMutationsOfType(m2) == NUM_GRNAS) + 											sum(males.genome1.countOfMutationsOfType(m2) == NUM_GRNAS);
		rate_dr = num_dr/num_x;
		rate_wt = num_wt/num_x;
	}	
	
	rate_has_drive = num_has_drive / pop_size;
	
	if(this_gen == 0){
		catn("Special_Generation:"+this_gen);
		catn("Introduction_Frequency:"+rate_has_drive);
		catn("Special_Pop_size:"+pop_size);
		catn("Special_Drive_Allele_Gene_Frequency:"+rate_dr);
		catn("Special_Drive_Gene_Carrying_Frequency:"+rate_has_drive);
		catn("Special_Num_Drive_Gene:"+num_dr);
		catn("Special_Num_Wild_Gene:"+num_wt);
		catn("Special_Wild_Type_Gene_Frequency:"+rate_wt);
	}else{
		catn("Generation:"+this_gen);
		catn("Pop_size:"+pop_size);
		catn("Drive_Allele_Gene_Frequency:"+rate_dr);
		catn("Drive_Gene_Carrying_Frequency:"+rate_has_drive);
		catn("Num_Drive_Gene:"+num_dr);
		catn("Num_Wild_Gene:"+num_wt);
		catn("Wild_Type_Gene_Frequency:"+rate_wt);
	}

}

// If there was no drop, stop after 100 generations of tracking
160 late() {
		catn("Generation:NAN");
		catn("Pop_size:NAN");
		catn("Drive_Allele_Gene_Frequency:NAN");
		catn("Drive_Gene_Carrying_Frequency:NAN");
		catn("Num_Drive_Gene:NAN");
		catn("Num_Wild_Gene:NAN");
		catn("Wild_Type_Gene_Frequency:NAN");
		sim.simulationFinished();

}




